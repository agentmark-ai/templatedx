"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[479],{9791:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"link","label":"Getting Started","href":"/templatedx/docs/getting-started","docId":"getting-started","unlisted":false},{"type":"link","label":"Overview","href":"/templatedx/docs/overview","docId":"overview","unlisted":false},{"type":"link","label":"FAQ","href":"/templatedx/docs/faq","docId":"faq","unlisted":false},{"type":"link","label":"Variables","href":"/templatedx/docs/variables","docId":"variables","unlisted":false},{"type":"link","label":"Expressions","href":"/templatedx/docs/expressions","docId":"expressions","unlisted":false},{"type":"link","label":"Syntax Highlighting","href":"/templatedx/docs/syntax-highlighting","docId":"syntax-highlighting","unlisted":false},{"type":"link","label":"Type Safety","href":"/templatedx/docs/type-safety","docId":"type-safety","unlisted":false},{"type":"link","label":"Components","href":"/templatedx/docs/components","docId":"components","unlisted":false},{"type":"link","label":"Filters","href":"/templatedx/docs/filters","docId":"filters","unlisted":false},{"type":"link","label":"Tags","href":"/templatedx/docs/tags","docId":"tags","unlisted":false}]},"docs":{"components":{"id":"components","title":"Components","description":"In TemplateDX, components function similarly to JSX, allowing you to pass props and children directly. To use a component, first import it, then insert it into your template. Specify any required props and content within the component tags. Inside the component, access props with {props.varName} and render any nested content with {props.children}.","sidebar":"docs"},"expressions":{"id":"expressions","title":"Expressions","description":"- Literal Expressions","sidebar":"docs"},"faq":{"id":"faq","title":"FAQ","description":"Here you\u2019ll find answers to frequently asked questions.","sidebar":"docs"},"filters":{"id":"filters","title":"Filters","description":"TemplateDX provides a set of built-in filters that you can use to manipulate and transform data within your templates. Filters are functions that take an input value and return a transformed output.","sidebar":"docs"},"getting-started":{"id":"getting-started","title":"Getting Started","description":"Follow the instructions below to install TemplateDX in your app.","sidebar":"docs"},"overview":{"id":"overview","title":"Overview","description":"TemplateDX is a declarative, extensible, and composable type-safe templating engine based on Markdown and JSX.","sidebar":"docs"},"syntax-highlighting":{"id":"syntax-highlighting","title":"Syntax Highlighting","description":"Since TemplateDX is a subset of MDX, it works well out of the box with any MDX-based syntax highlighters.","sidebar":"docs"},"tags":{"id":"tags","title":"Tags","description":"Tags are special components that perform operations on a section of your template. TemplateDX provides a set of built-in tags that you can use to manipulate and transform data within your templates. Or, you can create your own custom tags.","sidebar":"docs"},"type-safety":{"id":"type-safety","title":"Type Safety","description":"TemplateDX supports full type-safety, with just a few short steps.","sidebar":"docs"},"variables":{"id":"variables","title":"Variables","description":"- Accessing Variables","sidebar":"docs"}}}}')}}]);